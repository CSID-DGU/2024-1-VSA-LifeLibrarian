plugins {
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
}

group = 'com.lifelibrarians'
version = '0.0.1-SNAPSHOT'

java.sourceCompatibility = '17'

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring Boot
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-autoconfigure-processor')
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.springframework.boot:spring-boot-configuration-metadata')
    implementation('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.3.0')

    // Security
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security:spring-security-oauth2-authorization-server')

    // Monitoring
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('io.micrometer:micrometer-core:1.11.2')
    implementation('io.micrometer:micrometer-registry-prometheus')

    // Lombok
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    // MapStruct
    implementation('org.mapstruct:mapstruct:1.5.5.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.5.5.Final')

    // Etc
    runtimeOnly('org.mariadb.jdbc:mariadb-java-client')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0')
//    developmentOnly('org.springframework.boot:spring-boot-devtools')
//    developmentOnly('org.springframework.boot:spring-boot-docker-compose')

    // Test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testRuntimeOnly('com.h2database:h2')
}

test {
    environment 'SPRING_PROFILES_ACTIVE', 'test'
    useJUnitPlatform()
}